First method

        [TestMethod]
        public void TypicalMondayIsAWorkingDay()
        {
            WorkingDaysCalendar calendar = new WorkingDaysCalendar();
            
            DateTime monday = new DateTime(2012, 3, 12);

            Assert.IsTrue(calendar.IsWorkingDay(monday));
        }

First class that compiles

    public class WorkingDaysCalendar
    {
        public bool IsWorkingDay(DateTime day)
        {
            throw new NotImplementedException();
        }
    }

Test in green

        public bool IsWorkingDay(DateTime day)
        {
            return true;
        }

Enhanced test

        [TestMethod]
        public void TypicalMondayIsAWorkingDay()
        {
            WorkingDaysCalendar calendar = new WorkingDaysCalendar();
            
            DateTime monday = new DateTime(2012, 3, 12);
            Assert.AreEqual(monday.DayOfWeek, DayOfWeek.Monday);

            Assert.IsTrue(calendar.IsWorkingDay(monday));
        }

Second Test

        [TestMethod]
        public void TypicalSundayIsANonWorkingDay()
        {
            WorkingDaysCalendar calendar = new WorkingDaysCalendar();

            DateTime sunday = new DateTime(2012, 3, 11);
            Assert.AreEqual(sunday.DayOfWeek, DayOfWeek.Sunday);

            Assert.IsFalse(calendar.IsWorkingDay(sunday));
        }

Solution

        public bool IsWorkingDay(DateTime day)
        {
            if (day.DayOfWeek == DayOfWeek.Sunday)
                return false;

            return true;
        }

Third Test

        [TestMethod]
        public void TypicalSaturdayIsANonWorkingDay()
        {
            WorkingDaysCalendar calendar = new WorkingDaysCalendar();

            DateTime saturday = new DateTime(2012, 3, 10);
            Assert.AreEqual(saturday.DayOfWeek, DayOfWeek.Saturday);

            Assert.IsFalse(calendar.IsWorkingDay(saturday));
        }

Solution

        public bool IsWorkingDay(DateTime day)
        {
            if (day.DayOfWeek == DayOfWeek.Sunday || day.DayOfWeek == DayOfWeek.Saturday)
                return false;

            return true;
        }

Forth Test
Only to have a typical week described

        [TestMethod]
        public void TypicalWeek()
        {
            WorkingDaysCalendar calendar = new WorkingDaysCalendar();

            DateTime monday = new DateTime(2012, 3, 12);
            Assert.AreEqual(monday.DayOfWeek, DayOfWeek.Monday);

            Assert.IsTrue(calendar.IsWorkingDay(monday));
            Assert.IsTrue(calendar.IsWorkingDay(monday.AddDays(1)));
            Assert.IsTrue(calendar.IsWorkingDay(monday.AddDays(2)));
            Assert.IsTrue(calendar.IsWorkingDay(monday.AddDays(3)));
            Assert.IsTrue(calendar.IsWorkingDay(monday.AddDays(4)));
            Assert.IsFalse(calendar.IsWorkingDay(monday.AddDays(5)));
            Assert.IsFalse(calendar.IsWorkingDay(monday.AddDays(6)));
        }

